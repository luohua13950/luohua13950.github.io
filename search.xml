<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>10分钟快速安装Redis</title>
      <link href="/2020/06/01/10-fen-zhong-kuai-su-an-zhuang-redis/"/>
      <url>/2020/06/01/10-fen-zhong-kuai-su-an-zhuang-redis/</url>
      
        <content type="html"><![CDATA[<h3 id="获取redis资源"><a href="#获取redis资源" class="headerlink" title="获取redis资源"></a>获取redis资源</h3><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">wget</span> http://download.redis.io/releases/redis-4.0.8.tar.gz<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="解压"><a href="#解压" class="headerlink" title="解压"></a>解压</h3><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">tar</span> xzvf redis-4.0.8.tar.gz<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="编译安装"><a href="#编译安装" class="headerlink" title="编译安装"></a>编译安装</h3><pre class="line-numbers language-bash"><code class="language-bash">　　<span class="token function">cd</span> redis-4.0.8　　make（有Error报错请执行make distclean清除上次编译残留，可执行多次）　　<span class="token function">cd</span> src　　<span class="token function">make</span> <span class="token function">install</span> PREFIX<span class="token operator">=</span>/usr/local/redis（报错执行make distclean）<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="移动到-usr"><a href="#移动到-usr" class="headerlink" title="移动到/usr/"></a>移动到/usr/</h3><pre class="line-numbers language-bash"><code class="language-bash">　　<span class="token function">cd</span> <span class="token punctuation">..</span>/　　<span class="token function">mkdir</span> /usr/local/redis/etc　　<span class="token function">mv</span> redis.conf /usr/local/redis/etc    <span class="token function">cp</span> src/redis-cli /usr/local/bin/  <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="后台启动配置"><a href="#后台启动配置" class="headerlink" title="后台启动配置"></a>后台启动配置</h3><pre class="line-numbers language-bash"><code class="language-bash">　　<span class="token function">vi</span> /usr/local/redis/etc/redis.conf //将daemonize no 改成daemonize <span class="token function">yes</span>    <span class="token comment" spellcheck="true">#为了让非本机能访问，将redis.conf中的ip都注释掉 </span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="开机启动"><a href="#开机启动" class="headerlink" title="开机启动"></a>开机启动</h3><pre class="line-numbers language-bash"><code class="language-bash">　<span class="token function">vi</span> /etc/rc.local 　<span class="token comment" spellcheck="true">##在里面添加内容：</span>　/usr/local/redis/bin/redis-server     /usr/local/redis/etc/redis.conf <span class="token punctuation">(</span>意思就是开机调用这段开启redis的命令<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="启动redis"><a href="#启动redis" class="headerlink" title="启动redis"></a>启动redis</h3><pre class="line-numbers language-bash"><code class="language-bash">    /usr/local/redis/bin/redis-server /usr/local/redis/etc/redis.conf <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h3><pre class="line-numbers language-bash"><code class="language-bash">    redis-server /usr/local/redis/etc/redis.conf //启动redis    redis-cli <span class="token function">shutdown</span> -a password//停止　　<span class="token function">pkill</span> redis  //停止redis　　　　卸载redis：　　　　<span class="token function">rm</span> -rf /usr/local/redis //删除安装目录　　　　<span class="token function">rm</span> -rf /usr/bin/redis-* //删除所有redis相关命令脚本　　　　<span class="token function">rm</span> -rf /root/download/redis-4.0.4 //删除redis解压文件夹<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="一些设置"><a href="#一些设置" class="headerlink" title="一些设置"></a>一些设置</h3><pre class="line-numbers language-bash"><code class="language-bash">    redis-cli <span class="token comment" spellcheck="true">##进入redis客户端</span>    config <span class="token keyword">set</span> requirepass 123456 <span class="token comment" spellcheck="true"># 设置密码登录</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Redis </category>
          
      </categories>
      
      
        <tags>
            
            <tag> redis </tag>
            
            <tag> linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>基于centos的Django+gunicorn+ngixn应用部署</title>
      <link href="/2020/05/11/ji-yu-centos-de-django-gunicorn-ngixn-ying-yong-bu-shu/"/>
      <url>/2020/05/11/ji-yu-centos-de-django-gunicorn-ngixn-ying-yong-bu-shu/</url>
      
        <content type="html"><![CDATA[<h2 id="准备工作—-所需软件安装"><a href="#准备工作—-所需软件安装" class="headerlink" title="准备工作—-所需软件安装"></a>准备工作—-所需软件安装</h2><ul><li><p>准备服务器，可以购买腾讯云、百度云、华为云等，本次部署采用了百度云，具体购买可以到官网去看看，很简单，这步就略过了；   </p></li><li><p>服务器准备以后就需要在上面安装所需的一些软件，这里用的是centos的，首先自带的python环境是2.7的，不满足本次部署需要，如果使用django2.0以上，建议安装python3； <strong>mysql、python3、virualen、superviosr将单独列一篇安装教程</strong>，下列非必须的为不一定要安装的；</p></li><li><p>安装mysql    参考 <a href="https://blog.csdn.net/luohua13950/article/details/104641512" target="_blank" rel="noopener">基于docker快速安装mysql教程</a></p></li><li><p>安装python3</p></li><li><p>安装Virtualen（非必须）</p></li><li><p>nginx</p></li><li><p>superviosr</p></li><li><p>git(非必须)</p><pre class="line-numbers language-shell"><code class="language-shell">yum -y install git <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>gevent(非必须)</p><pre class="line-numbers language-shell"><code class="language-shell">pip install gevent  <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>安装gunicorn</p><pre class="line-numbers language-shell"><code class="language-shell">pip install gunicorn<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ul><h2 id="上传与下载代码"><a href="#上传与下载代码" class="headerlink" title="上传与下载代码"></a>上传与下载代码</h2><p>通常来说我们可以使用ftp、sftp等方式将代码上传到Linux上，但是这样做不太有利于版本的控制，只适用于自己玩玩的小项目，在此使用git进行代码管理,借此机会也在此温习一下git的一些命令。</p><h2 id="部署与配置"><a href="#部署与配置" class="headerlink" title="部署与配置"></a>部署与配置</h2><p>1.确保django setting里的必要设置都已完成  </p><pre class="line-numbers language-python"><code class="language-python">DEBUG <span class="token operator">=</span> <span class="token boolean">False</span><span class="token comment" spellcheck="true"># 生产部署必须设置为False</span><span class="token comment" spellcheck="true">#这里请设置为自己的域名，没有域名暂时设置为自己服务器ip</span>ALLOWED_HOSTS <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'www.happyhong.cn'</span><span class="token punctuation">,</span><span class="token string">"127.0.0.1"</span><span class="token punctuation">]</span>STATIC_URL <span class="token operator">=</span> <span class="token string">'/static/'</span><span class="token comment" spellcheck="true">#STATIC_ROOT=os.path.join(BASE_DIR,"static/")#错误</span><span class="token comment" spellcheck="true">#如果不设置STATIC_ROOT，当你在执行python manage.py collectstatic会遇到以下报错</span><span class="token comment" spellcheck="true">#django.core.exceptions.ImproperlyConfigured: You're using the staticfiles app without having set the #STATIC_ROOT setting to a filesystem path.</span>STATIC_ROOT<span class="token operator">=</span>os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>join<span class="token punctuation">(</span>BASE_DIR<span class="token punctuation">,</span><span class="token string">"/static/"</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#正确</span>STATICFILES_DIRS  <span class="token operator">=</span> <span class="token punctuation">(</span>    os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>join<span class="token punctuation">(</span>BASE_DIR<span class="token punctuation">,</span><span class="token string">"static"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                <span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h6 id="再提一下，必须设置STATIC-ROOT，否则会报："><a href="#再提一下，必须设置STATIC-ROOT，否则会报：" class="headerlink" title="再提一下，必须设置STATIC_ROOT，否则会报："></a>再提一下，必须设置STATIC_ROOT，否则会报：</h6><p>django.core.exceptions.ImproperlyConfigured: You’re using the staticfiles app without having set the STATIC_ROOT setting to a filesystem path.</p><p>2.设置好以后就可以执行<strong>python manage.py collectstatic</strong>命令（请在manag.py所在目录下执行）<br><img src="https://img-blog.csdnimg.cn/20200303160627576.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2x1b2h1YTEzOTUw,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>在这目录下执行，<strong>一般不建议root用户来部署</strong>，我这里主要是图省事了<br>执行完以后应该会有一个admin目录和一个自己的目录，这些就代表执行成功了~~<br><img src="https://img-blog.csdnimg.cn/20200303160817324.png" alt="在这里插入图片描述"><br>前面软件安装中我们已经成功安装gunicorn了，这里我们就可以先试一下是否能正常启动：<br>还是在刚才的目录执行：</p><pre class="line-numbers language-shell"><code class="language-shell">gunicorn -w 3 -b 127.0.0.1:8080 blog.wsgi:application这里要说明一下**blog.wsgi:application**，blog需要改为你的项目名称，application是固定参数不用变。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><img src="https://img-blog.csdnimg.cn/2020030316150689.png" alt="在这里插入图片描述"><br>如果有这样的输出则证明启动成功，其中有个gevent不用管，这是我后来安装的。可以在浏览器中输入你的ip访问一下应该是能成功的，但是css和js样式应该是没有的，接下来就要依靠nginx进行处理了；</p><p>3.启动、配置nginx<br>假设到现在你的nginx已经安装完毕，我的nginx目录是在<strong>/usr/local/nginx/sbin</strong> ，看一下这个路径下有什么，<br><img src="https://img-blog.csdnimg.cn/20200303162523626.png" alt="在这里插入图片描述"><br>我们可以在这里目录下使用：</p><pre class="line-numbers language-shell"><code class="language-shell">./nginx<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>启动nginx，然后使用输入</p><pre class="line-numbers language-shell"><code class="language-shell">ps -ef|grep nginx<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>命令进行查看nginx进程:<br>如果看到这样的进程说明可以正常启动。<img src="https://img-blog.csdnimg.cn/20200303162828884.png" alt="在这里插入图片描述"><br>或者也可以直接在<strong>浏览器</strong>输入 你的域名（或者ip):80，如果页面上有nginx关键字就说明启动成功，这里不再贴图。<br>接下来我们开始配置nginx配置文件:</p><pre class="line-numbers language-shell"><code class="language-shell">cd /usr/local/nginx/confls -l<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>然后使用<strong>ls -l</strong>命令查看，应该有一个nginx.conf的文件，我们再使用命令将原来默认配置文件进行备份。</p><pre class="line-numbers language-shell"><code class="language-shell">cp nginx.conf nginx.conf.bak<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://img-blog.csdnimg.cn/20200303163432792.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2x1b2h1YTEzOTUw,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><strong>vi nginx.conf</strong></p><pre class="line-numbers language-nginx"><code class="language-nginx"><span class="token keyword">user</span> <span class="token keyword">root</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">#如果使用的root用户一定要加，否则会报没有权限的错误，其它用户可加</span><span class="token comment" spellcheck="true">#event也必须加上</span><span class="token keyword">events</span> <span class="token punctuation">{</span>    <span class="token keyword">worker_connections</span>  <span class="token number">1024</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">http</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">#下面两行看情况加上，如果前端console报Resource interpreted as Stylesheet but transferred with MIME type text/plain；</span>    <span class="token comment" spellcheck="true">#则需要加上才能避免</span>    <span class="token keyword">include</span>       mime<span class="token punctuation">.</span><span class="token keyword">types</span><span class="token punctuation">;</span>    <span class="token keyword">default_type</span>  application<span class="token operator">/</span>octet<span class="token operator">-</span>stream<span class="token punctuation">;</span><span class="token keyword">server</span><span class="token punctuation">{</span>    <span class="token keyword">listen</span> <span class="token number">80</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">#监听的端口不需要改</span>    <span class="token keyword">server_name</span> www<span class="token punctuation">.</span>happyhong<span class="token punctuation">.</span>cn<span class="token punctuation">;</span><span class="token comment" spellcheck="true">#这里可换成你的域名或者ip</span>    <span class="token keyword">location</span> <span class="token operator">/</span> <span class="token punctuation">{</span>      <span class="token keyword">proxy_pass</span> <span class="token keyword">http</span><span class="token punctuation">:</span><span class="token operator">/</span><span class="token operator">/</span><span class="token number">127.0</span><span class="token punctuation">.</span><span class="token number">0.1</span><span class="token punctuation">:</span><span class="token number">8080</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">#不用改</span>      <span class="token keyword">proxy_set_header</span> Host <span class="token variable">$host</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">#</span>      <span class="token keyword">proxy_set_header</span> X<span class="token operator">-</span>Real<span class="token operator">-</span>IP <span class="token variable">$remote_addr</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">#获取远程ip</span>      <span class="token keyword">proxy_set_header</span> X<span class="token operator">-</span>Forwarded<span class="token operator">-</span>For <span class="token variable">$proxy_add_x_forwarded_for</span><span class="token punctuation">;</span>      <span class="token keyword">proxy_set_header</span> X<span class="token operator">-</span>Forwarded<span class="token operator">-</span>Proto <span class="token variable">$scheme</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">location</span> <span class="token operator">/</span>static <span class="token punctuation">{</span>      <span class="token keyword">alias</span> <span class="token operator">/</span><span class="token keyword">root</span><span class="token operator">/</span>www<span class="token operator">/</span>blog<span class="token operator">/</span>static<span class="token operator">/</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">#要有最后的斜杆</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>接下来让nginx重新载入配置文件：</p><pre class="line-numbers language-shell"><code class="language-shell">/usr/local/nginx/sbin/nginx -s reload <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>nginx配置结束。</p><p>4.配置gunicorn<br>gunicorn最好还是以配置文件的形式进行启动，因为gunicorn是python进行开发的，所以我们可以在项目根目录下（也就是与menage.py同级的）创建一个gunicorn.py的文件，<strong>vi gunicorn.py</strong>：</p><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true">#!/usr/bin/env python</span><span class="token comment" spellcheck="true">#导入库</span><span class="token keyword">import</span> multiprocessing<span class="token comment" spellcheck="true">#得到cpu个数</span>cpu_count <span class="token operator">=</span> multiprocessing<span class="token punctuation">.</span>cpu_count<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#必须，绑定等于gunicorn -w 3 -b 127.0.0.1:8080 blog.wsgi:application中的 -b</span>bind<span class="token operator">=</span><span class="token string">"127.0.0.1:8080"</span>backlog<span class="token operator">=</span><span class="token number">64</span><span class="token comment" spellcheck="true">#必须，进程个数等于gunicorn -w 3 -b 127.0.0.1:8080 blog.wsgi:application中的 -w</span>worker<span class="token operator">=</span>cpu_count<span class="token operator">*</span><span class="token number">2</span><span class="token operator">+</span><span class="token number">1</span><span class="token comment" spellcheck="true">#这里我采用了“gevent”，可以实现更高的并发，安装也很简单，pip install  gevent即可</span>worker_class<span class="token operator">=</span><span class="token string">"gevent"</span><span class="token comment" spellcheck="true">#线程数，可选</span>threads<span class="token operator">=</span><span class="token number">3</span>worker_connections<span class="token operator">=</span><span class="token number">500</span><span class="token comment" spellcheck="true">#超时时间，建议加上，一般我们个人用的服务器配置都一般，响应时间可能会比正常得要高</span>timeout<span class="token operator">=</span><span class="token number">60</span>keepalive<span class="token operator">=</span><span class="token number">2</span><span class="token comment" spellcheck="true">#启动之前切换到的目录，改为你自己的项目目录</span>chdir<span class="token operator">=</span><span class="token string">"/root/www/blog"</span><span class="token comment" spellcheck="true">#这个建议设为False,因为我们后面要用superviosr进行管理，如果这项为True会导致superviosr启动gunicorn报错</span>daemon<span class="token operator">=</span><span class="token boolean">False</span><span class="token comment" spellcheck="true">#日志目录，可有可无，因为nginx的日志已经差不多满足了</span>accesslog<span class="token operator">=</span><span class="token string">"/var/log/gunicorn/access.log"</span><span class="token comment" spellcheck="true">#日志格式h：远程ip l:- m:请求方法....</span>access_log_format <span class="token operator">=</span> <span class="token string">'%(h)s %(l)s %(m)s %(u)s %(t)s %(l)s %(s)s %(a)s'</span><span class="token comment" spellcheck="true">#可有可无</span>errorlog<span class="token operator">=</span><span class="token string">"/var/log/gunicorn/error.log"</span><span class="token comment" spellcheck="true">#日志等级，可有可无</span>loglevel<span class="token operator">=</span><span class="token string">"info"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>如果你不想手动敲只需将上面的内容复制然后目录改为自己的就行。<br>这样我们就可以将gunicorn用配置文件启动，再尝试启动之前我们先将原本的gunicorn进程杀掉，使用命令</p><pre class="line-numbers language-shell"><code class="language-shell">pkill -f gunicorn<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>，可以用<strong>ps -ef|grep gunicorn</strong>确认是否杀掉，如果有没有杀掉的可用：</p><pre class="line-numbers language-shell"><code class="language-shell">kill -9 进程id<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>，然后我们可以使用这个命令尝试使用配置文件启动gunicorn（依然是在项目根目录下进行执行），</p><pre class="line-numbers language-shell"><code class="language-shell">gunicorn -c gunicorn.py blog.wsgi:application<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>更加安全的方法是加上gunicorn的路径，例如：</p><pre class="line-numbers language-shell"><code class="language-shell">/root/virtlen/py3/bin/gunicorn -c gunicorn.py blog.wsgi:application<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>我的是装在virtlen中的，强烈建议使用virtualen进行管理，如果你跟我一样使用了virtualen,那还需要加上虚拟环境的python路径:</p><pre class="line-numbers language-shell"><code class="language-shell">/root/virtlen/py3/bin/python   /root/virtlen/py3/bin/gunicorn -c gunicorn.py blog.wsgi:application命令分为三部分：/root/virtlen/py3/bin/python：python路径    /root/virtlen/py3/bin/gunicorn：gunicorn路径 -c gunicorn.py：参数<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>注意python路径和gunicorn路径中的空格，这样做能避免很多不必要的报错，例如找不到路径等等。至此，gunicorn配置部分结束。</p><p>5.supervisor管理gunicorn<br>假设你的superviosr已经按照步骤安装完毕，接下来需要在supervisor配置文件路径下新建一个gunicorn.ini的文件，我的路径是在 <strong>/var/local/super/conf</strong>，这个路径下专门存放supervisor的应用配置文件。 </p><pre class="line-numbers language-shell"><code class="language-shell">vi gunicorn.ini<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-ini"><code class="language-ini">#program是固定的，gunicorn是你取得名字，我们一会需要利用这个名字启动应用<span class="token selector">[program:gunicorn]</span>#这个命令刚才上面解释过了<span class="token constant">command</span><span class="token attr-value"><span class="token punctuation">=</span>/root/virtlen/py3/bin/python /root/virtlen/py3/bin/gunicorn -c gunicorn.py blog.wsgi:application</span>#启动应用的目录<span class="token constant">directory</span><span class="token attr-value"><span class="token punctuation">=</span>/root/www/blog</span>#启动应用的用户<span class="token constant">user</span><span class="token attr-value"><span class="token punctuation">=</span>root</span>#自动重启<span class="token constant">autorestart</span><span class="token attr-value"><span class="token punctuation">=</span>true</span>#重启次数<span class="token constant">startretires</span><span class="token attr-value"><span class="token punctuation">=</span>3</span><span class="token constant">redirect_stderr</span><span class="token attr-value"><span class="token punctuation">=</span>true</span><span class="token constant">stderr_logfile</span><span class="token attr-value"><span class="token punctuation">=</span>/var/local/super/log/error.log</span><span class="token constant">stdout_logfile</span><span class="token attr-value"><span class="token punctuation">=</span>/var/local/super/log/out.log                                         </span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>接下来查看superviosr是否正常启动了，如果启动了则使用命令进行配置文件更新，</p><pre class="line-numbers language-shell"><code class="language-shell">supervisorctl update<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>这个命令对配置没有更新的进程并没有影响；然后使用</p><pre class="line-numbers language-shell"><code class="language-shell">supervisorctl<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p> 进入superviosr客户端，输入<strong>status</strong>即可查看当前运行的进程：<br><img src="https://img-blog.csdnimg.cn/20200303185924422.png" alt="在这里插入图片描述"><br>这里我的gunicorn是运行RUNNING状态，当然如果是第一次启动肯定是stopped的，这时候执行start gunicorn命令即可将gunicorn启动（记得执行之前先将gunicorn停止），如果报 Exited too quickly (process log may have details)错，可以去查看日志或者看看是不是gunicorn.py里的deamon为Flase没有改。</p><h2 id="结束"><a href="#结束" class="headerlink" title="结束"></a>结束</h2><p>到此你可以在浏览器中输入你的域名或者ip：port访问你的网址了，如果还有错误请将错误贴在评论里，最后再厚颜无耻的替自己网站打个广告：<a href="http://www.happyhong.cn/">从今天开始种树</a>，欢迎大家批评指正，软件安装稍后会更新。。</p>]]></content>
      
      
      <categories>
          
          <category> Django </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux </tag>
            
            <tag> django </tag>
            
            <tag> gunicorn </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>深入浅出图神经网络：GNN原理解析（一）</title>
      <link href="/2020/04/11/shen-ru-qian-chu-tu-shen-jing-wang-luo-gnn-yuan-li-jie-xi-yi/"/>
      <url>/2020/04/11/shen-ru-qian-chu-tu-shen-jing-wang-luo-gnn-yuan-li-jie-xi-yi/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>最近在学习图神经网络相关知识，一起来拆书:<strong>《深入浅出图神经网络：GNN原理解析》</strong>，这本书从原理、算法、实现、应用四个维度详细讲解了图神经网络。接下来打算结合书本内容和相关知识做个专题记录分享，今天先跟大家聊聊关于图的一些基础知识。</p><h2 id="为什么要研究图？"><a href="#为什么要研究图？" class="headerlink" title="==为什么要研究图？=="></a>==为什么要研究图？==</h2><p><img src="https://img-blog.csdnimg.cn/20200323223516203.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2x1b2h1YTEzOTUw,size_16,color_FFFFFF,t_70#pic_center" alt></p><p>在过去的几年中，神经网络的成功推动了模式识别和数据挖掘的研究。许多机器学习任务，如目标检测、机器翻译和语音识别，曾经严重依赖手工的特征工程来提取信息特征集被各种端到端的深度学习范式（例如卷积神经网络（CNN）、长短期记忆（LSTM）和自动编码器）彻底改变了。</p><p>尽管深度学习在欧氏空间中的数据方面取得了巨大的成功，但在许多<strong>实际的应用场景中的数据是从非欧式空间生成的</strong>，同样需要进行有效的分析。图数据的复杂性对现有的机器学习算法提出了重大挑战，这是因为<strong>图数据是不规则的</strong>。每个图都有一个大小可变的无序节点，图中的每个节点都有不同数量的相邻节点，导致一些重要的操作（例如卷积）在图像上很容易计算，但不再适合直接用于图域。</p><p>近年来，人们对<strong>深度学习方法在图数据上的扩展</strong>越来越感兴趣。很多数据都是图结构，例如社交网络、经济网络、生物医学网络、信息网络（互联网网站、学术引用）、互联网、神经网络。而<strong>网络是它们的通用语言，因此具备极大的研究价值</strong>。在深度学习的成功推动下，研究人员借鉴了卷积网络、循环网络和深度自动编码器的思想，定义和设计了用于处理图数据的神经网络结构，由此衍生出一个新的研究热点——“<strong>图神经网络（Graph Neural Networks，GNN）</strong>”本篇文章就从图的概述入手开始我们的GNN之路。</p><h2 id="1-1-图的基本定义"><a href="#1-1-图的基本定义" class="headerlink" title="==1.1 图的基本定义=="></a>==1.1 图的基本定义==</h2><p>图(G)定义为(V,E) ，记为G=(V,E) 。<br>其中： V是顶点(Vertex)的非空有限集合，记为V(G)；E是无序集V&amp;V的一个子集，记为E(G) 。<br>将顶点集合为空的图称为空图。其形式化定义为：<br><img src="https://img-blog.csdnimg.cn/20200324085037469.png" alt="在这里插入图片描述"></p><h3 id="1-1-1-图的基本类型"><a href="#1-1-1-图的基本类型" class="headerlink" title="1.1.1　图的基本类型"></a>1.1.1　图的基本类型</h3><ul><li>有向图与无向图     （边是否有方向）</li><li>非加权图与加权图（边是否有权重）</li><li>连通图与非连通图（是否有孤立顶点）</li><li>二部图                       （任意边均从属于其2个子图）<br><img src="https://img-blog.csdnimg.cn/20200324085323855.png" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20200324085640165.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2x1b2h1YTEzOTUw,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><h3 id="1-1-2-邻居和度"><a href="#1-1-2-邻居和度" class="headerlink" title="1.1.2　邻居和度"></a>1.1.2　邻居和度</h3><img src="https://img-blog.csdnimg.cn/20200324090108260.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2x1b2h1YTEzOTUw,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>邻居：与顶点A相连接的顶点B和顶点C都是A的邻居<br>度：顶点A的边的数量（包括出度2与入度1）<h3 id="1-1-3-子图与路径"><a href="#1-1-3-子图与路径" class="headerlink" title="1.1.3　子图与路径"></a>1.1.3　子图与路径</h3>子图：设G=(V，E)是一个图，若V’是V的子集，E’是E的子集，且E’中的边所关联的顶点均在V’中，则G’=(V’，E’)也是一个图，并称其为G的子图(Subgraph)。<br>路径：从顶点V1到顶点V2的边的数目，最少的路径成为顶点的距离<br><img src="https://img-blog.csdnimg.cn/20200324090420719.png" alt="在这里插入图片描述"><img src="https://img-blog.csdnimg.cn/20200324090434698.png" alt="在这里插入图片描述"><ul><li><strong>无向图的路径</strong><br>在无向图G中，若存在一个顶点序列vp,vi1,vi2,…,vim,vq，使得(vp，vi1)，(vi1，vi2)，…，(vim，vq)均属于E(G)，则称顶点vp到vq存在一条路径(Path)。</li></ul></li></ul><ul><li><p><strong>有向图的路径</strong><br>在有向图G中，路径也是有向的,它由E(G)中的有向边&lt;vp，vi1&gt;，&lt;vi1，vi2&gt;，…，&lt;vim，vq&gt;组成。</p></li><li><p><strong>路径长度</strong><br>路径长度定义为该路径上边的数目。</p></li><li><p><strong>简单路径</strong><br> 若一条路径上除了vp和vq可以相同外，其余顶点均不相同，则称此路径为一条简单路径。<br>如图G2中顶点序列vl，v2，v3，v4是一条从顶点v1到顶点v4的长度为3的简单路径；顶点序列v1，v2，v4，v1，v3是一条从顶点v1到顶点v3的长度为4的路径，但不是简单路径；</p></li><li><p>简单回路或简单环(Cycle)<br>起点和终点相同(vp=vq)的简单路径称为简单回路或简单环(Cycle)。<br>如图G2中，顶点序列v1，v2，v4，v1是一个长度为3的简单环；有向图G1中，顶点序列v1，v2，v1是一长度为2的有向简单环。</p></li><li><p>有根图和图的根<br>在一个有向图中，若存在一个顶点v，从该顶点有路径可以到达图中其它所有顶点，则称此有向图为有根图，v称作图的根。</p><h2 id="1-2-图的存储与遍历"><a href="#1-2-图的存储与遍历" class="headerlink" title="==1.2 图的存储与遍历=="></a>==1.2 图的存储与遍历==</h2></li></ul><h3 id="1-2-1-邻接矩阵与关联矩阵"><a href="#1-2-1-邻接矩阵与关联矩阵" class="headerlink" title="1.2.1　邻接矩阵与关联矩阵"></a>1.2.1　邻接矩阵与关联矩阵</h3><p>K阶邻居：V1通过k条边到达顶点V2，V2为V1的k阶邻居<br>邻接矩阵：N个顶点组成的2维度关系矩阵<br>关联矩阵：N个顶点与M条边组成的2维度关系矩阵。关联矩阵M(D)=(m<sub>ij</sub>)<sub>n×ε</sub>的元素m<sub>ij</sub>定义为：<br><img src="https://img-blog.csdnimg.cn/20200324091445321.png" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20200324091241274.png" alt="在这里插入图片描述"><br>上图的邻接矩阵和关联矩阵分别是:<br><img src="https://img-blog.csdnimg.cn/20200324091307682.png" alt="在这里插入图片描述"><img src="https://img-blog.csdnimg.cn/20200324091325913.png" alt="在这里插入图片描述"></p><h3 id="1-2-2-图的遍历"><a href="#1-2-2-图的遍历" class="headerlink" title="1.2.2　图的遍历"></a>1.2.2　图的遍历</h3><p>图的遍历：从某顶点出发，沿着图中的边对所有顶点访问一次且仅访问一次。<br>包括深度优先（DFS）与广度优先（BFS）</p><ul><li>深度优先遍历（deep first traverse）<br>所谓深度优先就是以纵向优先的方式遍历节点。我们从当前节点curr出发，如果当前节点被访问过，就返回，否则将该节点标记为访问过的节点，然后在递归访问当前节点的所有邻接节点。</li></ul><pre class="line-numbers language-python"><code class="language-python"> function traverse（Node node）｛    <span class="token operator">//</span>递归方式实现的深度优先遍历              <span class="token keyword">if</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>isVisited<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token operator">//</span>如果当前节点已经被访问过                  <span class="token keyword">return</span><span class="token punctuation">;</span>            <span class="token operator">//</span>这个是递归出口              <span class="token punctuation">}</span>              node<span class="token punctuation">.</span>isVisited<span class="token operator">=</span>true<span class="token punctuation">;</span>   <span class="token operator">//</span>将当前节点置为已经访问              <span class="token keyword">for</span><span class="token punctuation">(</span>var i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>node<span class="token punctuation">.</span>brother<span class="token punctuation">.</span>length<span class="token punctuation">;</span>i<span class="token operator">+</span><span class="token operator">+</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                  traverse<span class="token punctuation">(</span>node<span class="token punctuation">.</span>brother<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token operator">//</span>访问当前node的所有邻接节点              <span class="token punctuation">}</span>              <span class="token keyword">return</span><span class="token punctuation">;</span>       <span class="token operator">//</span>结束          ｝<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>广度有限遍历（broad first traverse）<br>所谓的广度优先指的是从当前节点curr出发，将该节点标记为已经访问过的节点，然后在依次访问curr的没有被访问的邻接节点，然后在依次访问邻接节点的邻接节点，直到所有的节点被访问。</li></ul><pre class="line-numbers language-python"><code class="language-python">function bft<span class="token punctuation">(</span>Node node<span class="token punctuation">)</span><span class="token punctuation">{</span>    var queue<span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span>temp<span class="token punctuation">;</span> <span class="token operator">//</span>队列结构，是待访问的节点队列，这些节点被排了顺序，按顺序被访问             queue<span class="token punctuation">.</span>push<span class="token punctuation">(</span>node<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token operator">//</span>初始化队列结构             <span class="token keyword">while</span><span class="token punctuation">(</span>queue<span class="token punctuation">.</span>isNotEmpty<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>｛   <span class="token operator">//</span>当队列不为空的时候                temp<span class="token operator">=</span>queue<span class="token punctuation">.</span>shift<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token operator">//</span>取得当前的节点元素                temp<span class="token punctuation">.</span>isVisited<span class="token operator">=</span>true<span class="token punctuation">;</span>           <span class="token operator">//</span>将当前节点置为已经访问                <span class="token keyword">for</span><span class="token punctuation">(</span>var i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>temp<span class="token punctuation">.</span>brother<span class="token punctuation">.</span>length<span class="token punctuation">;</span>i<span class="token operator">+</span><span class="token operator">+</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                    <span class="token keyword">if</span><span class="token punctuation">(</span>!temp<span class="token punctuation">.</span>brother<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>isVisited<span class="token punctuation">)</span><span class="token punctuation">{</span>   <span class="token operator">//</span>如果当前节点的邻接节点没有被访问过                        queue<span class="token punctuation">.</span>push<span class="token punctuation">(</span>temp<span class="token punctuation">.</span>brother<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token operator">//</span>将这个邻接节点加入待访问队列                    <span class="token punctuation">}</span>                <span class="token punctuation">}</span>             ｝         <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="1-3-图数据的应用场景"><a href="#1-3-图数据的应用场景" class="headerlink" title="==1.3 图数据的应用场景 =="></a>==1.3 图数据的应用场景 ==</h2><p>比起传统的信息存储和组织模式，图数据库能够很清晰揭示复杂的模式，尤其在错综复杂的社交，物流，金融风控行业效果更为明显。</p><p>百花齐放的图数据库，有Operational 图数据库、RDF图数据库、多模式图数据、分析及大图数据库，图数据库的关注度越来越多，并且大都是有持续在更新。</p><p><strong>1.图数据类型</strong>：<br> 1). 同构图：图中的节点类型与关系类型都仅有1种，如万维网<br> 2). 异构图：图中的节点类型与关系类型都多余1种，关系复杂，更贴近现实<br> 3). 属性图：相对异构图，对数据添加属性（标签与属性）<br> 4). 非显示图：数据之间没有显示地定义关系。</p><p><strong>2.图的应用例：</strong><br>    1). 社交网络（人与人）<br>   2). 电子购物（人与物）<br>    3). 化学分子（元素与元素）<br>    4). 交通网络（站点之间）<br>    5). 电路设计图（元器件间）</p><p><strong>3.GNN的分类任务：</strong><br>     <em> 节点分类：如通过引用网络对论文节点分类      </em> 边分类及预测：如预测社交网络中的2人关系，并进行推荐<br>      * 图分类、表示、生成任务：如药物分子的分类，酶的分类等</p><h2 id="总结"><a href="#总结" class="headerlink" title="==总结=="></a>==总结==</h2><p>本次分享回顾了关于图的基本概述以及用于描述图的最基本的属性。下一篇文章我们将给出详细的Python 示例，从代码的角度深入理解图的定义、图的存储和图的性质：</p><h2 id="结束"><a href="#结束" class="headerlink" title="结束"></a>结束</h2><p>更多内容请关注<a href="http://www.happyhong.cn/">从今天开始种树</a><br>关注知识图谱与大数据公众号，获取更多内容。<br><img src="https://img-blog.csdnimg.cn/20200321100547328.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2x1b2h1YTEzOTUw,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p>]]></content>
      
      
      <categories>
          
          <category> 神经网络 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 神经网络 </tag>
            
            <tag> GNN </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>爬虫学习(2):贴吧之骑马与砍杀2，愿它长寿？</title>
      <link href="/2020/03/29/pa-chong-xue-xi-2-tie-ba-zhi-qi-ma-yu-kan-sha-2-yuan-ta-chang-shou/"/>
      <url>/2020/03/29/pa-chong-xue-xi-2-tie-ba-zhi-qi-ma-yu-kan-sha-2-yuan-ta-chang-shou/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>爷爷，你的骑砍2发售了！！！骑马与砍杀2:霸主 抢先体验版于2020年3月31日发售，到今天砍友们已经畅砍了一周，从中文站快速更新版本的消息来看，目前体验版还存在很多bug，希望经过这段时间的完善能让正式版更加具有可玩性。当然，今天不是来做游戏试玩，我们还是希望能通过爬取骑砍吧的一些评论看看发售前和发售后大众的态度，不废话了，开始。</p><h2 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h2><h3 id="工具"><a href="#工具" class="headerlink" title="工具"></a>工具</h3><ul><li>mongdb</li><li>xpath库</li><li>requests库</li><li>xpath-helper<h3 id="锁定网站"><a href="#锁定网站" class="headerlink" title="锁定网站"></a>锁定网站</h3>因为骑马与砍杀吧混有太多1代内容，这里选择了骑砍2吧作为目标。百度搜索骑砍2吧即可进入贴吧中，或者<a href="https://tieba.baidu.com/f?kw=%C6%EF%BF%B32" target="_blank" rel="noopener">点击这里</a>(<a href="https://tieba.baidu.com/f?kw=%C6%EF%BF%B32),进入后按照惯例F12打开开发者模式，切到Network页面，F5刷新页面，现在呈现应该如下图所示：" target="_blank" rel="noopener">https://tieba.baidu.com/f?kw=%C6%EF%BF%B32),进入后按照惯例F12打开开发者模式，切到Network页面，F5刷新页面，现在呈现应该如下图所示：</a><br><img src="https://img-blog.csdnimg.cn/20200406161405859.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2x1b2h1YTEzOTUw,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>切到Doc选项，发现只剩一个请求，点击这个带有奇怪字符（红色箭头）的请求：<br><img src="https://img-blog.csdnimg.cn/20200406161819200.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2x1b2h1YTEzOTUw,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>有兴趣可以把这个URL解码看看，百度很多，这里就不列出网址了：<br><img src="https://img-blog.csdnimg.cn/20200406162300256.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2x1b2h1YTEzOTUw,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>可以从上图看到那一串字符就变成了骑砍2，这里其实也不难猜测url里kw二字其实就是keywords的意思，骑砍2换成随意一个词都能跳转到对应贴吧。接下来切到Element页面，开始定位资源，会发现页面资源很多，这时候可以切换到移动端模式会简洁一点：<br><img src="https://img-blog.csdnimg.cn/20200406162847299.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2x1b2h1YTEzOTUw,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>移动端模式感觉少了很多乱七八糟的东西：<br><img src="https://img-blog.csdnimg.cn/20200406162903271.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2x1b2h1YTEzOTUw,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><h3 id="提取贴子内容"><a href="#提取贴子内容" class="headerlink" title="提取贴子内容"></a>提取贴子内容</h3>点击左下方箭头选项用鼠标定位贴子内容元素，观察规律，不难发现贴子都在li标签下：<br><img src="https://img-blog.csdnimg.cn/20200406163622990.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2x1b2h1YTEzOTUw,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>看看li标签下的样式：<br><img src="https://img-blog.csdnimg.cn/20200406164059859.png" alt="在这里插入图片描述"><br>想要的两个信息已在上图展示，ul里包li的关系已经知道，接下来就是如何提取，打开xpath-hepler，下列xpath语句将选中所有li：</li></ul><pre class="line-numbers language-python"><code class="language-python"><span class="token operator">//</span>ul<span class="token punctuation">[</span>@<span class="token keyword">class</span><span class="token operator">=</span><span class="token string">'threads_list'</span><span class="token punctuation">]</span><span class="token operator">//</span>li<span class="token punctuation">[</span>@<span class="token keyword">class</span><span class="token operator">=</span><span class="token string">'tl_shadow tl_shadow_new '</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://img-blog.csdnimg.cn/20200406164444191.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2x1b2h1YTEzOTUw,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>由于贴子内容是被<code>div class=&quot;ti_title&quot;</code>包围的，即可使用下列语句,以第一个li为代表：</p><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true">#这里1表示第一个li</span><span class="token operator">//</span>ul<span class="token punctuation">[</span>@<span class="token keyword">class</span><span class="token operator">=</span><span class="token string">'threads_list'</span><span class="token punctuation">]</span><span class="token operator">//</span>li<span class="token punctuation">[</span>@<span class="token keyword">class</span><span class="token operator">=</span><span class="token string">'tl_shadow tl_shadow_new '</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">/</span>a<span class="token punctuation">[</span>@<span class="token keyword">class</span><span class="token operator">=</span><span class="token string">'j_common ti_item '</span><span class="token punctuation">]</span><span class="token operator">/</span>@href<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><img src="https://img-blog.csdnimg.cn/20200406164815355.png" alt="在这里插入图片描述"><br>同样也可以得到贴子内容，ul,li前缀不变：<br><img src="https://img-blog.csdnimg.cn/2020040616503129.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2x1b2h1YTEzOTUw,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h3 id="提取评论列表"><a href="#提取评论列表" class="headerlink" title="提取评论列表"></a>提取评论列表</h3><p>进入一个贴子打开开发者工具查看，发现评论列表依然在ul–&gt;li下面，评论内容则在<code>div content</code>下面：<br><img src="https://img-blog.csdnimg.cn/20200406165631636.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2x1b2h1YTEzOTUw,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>使用下图绿色框标注的嵌套规则即可写出xpath语句，进行内容提取：<br><img src="https://img-blog.csdnimg.cn/20200406170106523.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2x1b2h1YTEzOTUw,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h3 id="翻页"><a href="#翻页" class="headerlink" title="翻页"></a>翻页</h3><p>页面内容已提取完毕，接下来就是要翻页，可以先看一下第一页的url，然后点击第二页对比不同之处：<br><img src="https://img-blog.csdnimg.cn/20200406170331851.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2x1b2h1YTEzOTUw,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>点击第二页后，url中的pn从0改变到30：</p><pre class="line-numbers language-python"><code class="language-python">https<span class="token punctuation">:</span><span class="token operator">//</span>tieba<span class="token punctuation">.</span>baidu<span class="token punctuation">.</span>com<span class="token operator">/</span>f?kw<span class="token operator">=</span><span class="token operator">%</span>C6<span class="token operator">%</span>EF<span class="token operator">%</span>BF<span class="token operator">%</span>B32<span class="token operator">&amp;</span>pn<span class="token operator">=</span><span class="token number">0</span><span class="token operator">&amp;</span>https<span class="token punctuation">:</span><span class="token operator">//</span>tieba<span class="token punctuation">.</span>baidu<span class="token punctuation">.</span>com<span class="token operator">/</span>f?kw<span class="token operator">=</span><span class="token operator">%</span>C6<span class="token operator">%</span>EF<span class="token operator">%</span>BF<span class="token operator">%</span>B32<span class="token operator">&amp;</span>pn<span class="token operator">=</span><span class="token number">30</span><span class="token operator">&amp;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><img src="https://img-blog.csdnimg.cn/20200406170508730.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2x1b2h1YTEzOTUw,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>知道是如何翻页即可编写代码进行提取内容了。</p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><h3 id="请求头"><a href="#请求头" class="headerlink" title="请求头"></a>请求头</h3><p>复制走即可</p><pre class="line-numbers language-python"><code class="language-python">USER_AGENT <span class="token operator">=</span> <span class="token punctuation">[</span>    <span class="token string">'Mozilla/5.0 (Windows NT 6.1; rv:50.0) Gecko/20100101 Firefox/50.0'</span><span class="token punctuation">,</span>    <span class="token string">'Mozilla/5.0 (Windows NT 6.3; WOW64; rv:50.0) Gecko/20100101 Firefox/50.0'</span><span class="token punctuation">,</span>    <span class="token string">'Mozilla/5.0 (X11; Linux x86_64; rv:50.0) Gecko/20100101 Firefox/50.0'</span><span class="token punctuation">,</span>    <span class="token string">'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_11_5) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/54.0.2840.98 Safari/537.36'</span><span class="token punctuation">,</span>    <span class="token string">'Mozilla/5.0 (compatible; MSIE 9.0; Windows NT 6.1; Trident/5.0;  Trident/5.0)'</span><span class="token punctuation">,</span>    <span class="token string">'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_10_5) AppleWebKit/602.2.14 (KHTML, like Gecko) Version/10.0.1 Safari/602.2.14'</span><span class="token punctuation">,</span>    <span class="token string">'Mozilla/5.0 (Windows NT 6.3; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/54.0.2840.71 Safari/537.36'</span><span class="token punctuation">,</span>    <span class="token string">'Mozilla/5.0 (iPad; CPU OS 10_1_1 like Mac OS X) AppleWebKit/602.2.14 (KHTML, like Gecko) Version/10.0 Mobile/14B100 Safari/602.1'</span><span class="token punctuation">,</span>    <span class="token string">'Mozilla/5.0 (Macintosh; Intel Mac OS X 10.11; rv:49.0) Gecko/20100101 Firefox/49.0'</span><span class="token punctuation">,</span>    <span class="token string">'Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:50.0) Gecko/20100101 Firefox/50.0'</span><span class="token punctuation">,</span>    <span class="token string">'Mozilla/5.0 (Windows NT 6.1; WOW64; rv:45.0) Gecko/20100101 Firefox/45.0'</span><span class="token punctuation">,</span>    <span class="token string">'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/74.0.3729.169 Safari/537.36'</span><span class="token punctuation">,</span>    <span class="token string">"Mozilla/5.0 (Windows NT 6.3; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/75.0.3770.100 Safari/537.36"</span><span class="token punctuation">,</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="翻页-1"><a href="#翻页-1" class="headerlink" title="翻页"></a>翻页</h3><p>可以添加cookie进行访问：</p><pre class="line-numbers language-python"><code class="language-python">   <span class="token keyword">def</span> <span class="token function">run</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token comment" spellcheck="true">#可有可无</span>        Cookie <span class="token operator">=</span> <span class="token punctuation">{</span>            <span class="token string">"BAIDUID"</span><span class="token punctuation">:</span><span class="token string">"F8707632F4FA0F6C249A52BB3673626F:FG=1"</span><span class="token punctuation">,</span>            <span class="token string">"BAIDU_WISE_UID"</span><span class="token punctuation">:</span><span class="token string">"wapp_1585653783353_960"</span><span class="token punctuation">,</span>            <span class="token string">"BDORZ"</span><span class="token punctuation">:</span><span class="token string">"B490B5EBF6F3CD402E515D22BCDA1598"</span><span class="token punctuation">,</span>            <span class="token string">"BIDUPSID"</span><span class="token punctuation">:</span><span class="token string">"E7EAFAE7E18C12733A8DBD9965A34A2B"</span><span class="token punctuation">,</span>            <span class="token string">"mo_originid"</span><span class="token punctuation">:</span><span class="token string">"2"</span><span class="token punctuation">,</span>            <span class="token string">"st_sign"</span><span class="token punctuation">:</span><span class="token string">"0e4c42ab"</span><span class="token punctuation">,</span>            <span class="token string">"SEENKW"</span><span class="token punctuation">:</span><span class="token string">"%E9%AA%91%E7%A0%8D2"</span><span class="token punctuation">,</span>            <span class="token string">"TIEBAUID"</span><span class="token punctuation">:</span><span class="token string">"c1fb1068593f73ab692c2bd8"</span><span class="token punctuation">,</span>            <span class="token string">"TIEBA_USERTYPE"</span><span class="token punctuation">:</span><span class="token string">"7a4a7b31aab7064b5ea62053"</span><span class="token punctuation">,</span>        <span class="token punctuation">}</span>        self<span class="token punctuation">.</span>session<span class="token punctuation">.</span>cookies <span class="token operator">=</span> requests<span class="token punctuation">.</span>utils<span class="token punctuation">.</span>cookiejar_from_dict<span class="token punctuation">(</span>Cookie<span class="token punctuation">)</span>        count <span class="token operator">=</span> <span class="token number">1</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">900</span><span class="token punctuation">,</span><span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token comment" spellcheck="true">#这里进行翻页</span>            resp <span class="token operator">=</span> self<span class="token punctuation">.</span>download_page<span class="token punctuation">(</span>self<span class="token punctuation">.</span>urls<span class="token punctuation">.</span>format<span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token comment" spellcheck="true">#转换为element对象</span>            html <span class="token operator">=</span> etree<span class="token punctuation">.</span>HTML<span class="token punctuation">(</span>resp<span class="token punctuation">.</span>text<span class="token punctuation">)</span>            <span class="token comment" spellcheck="true">#解析、提取内容</span>            self<span class="token punctuation">.</span>parser<span class="token punctuation">(</span>html<span class="token punctuation">)</span>            <span class="token comment" spellcheck="true">#随机睡眠</span>            rd <span class="token operator">=</span>random<span class="token punctuation">.</span>randint<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">15</span><span class="token punctuation">)</span>            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"第{}页爬取结束,休眠{}秒..."</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>count<span class="token punctuation">,</span>rd<span class="token punctuation">)</span><span class="token punctuation">)</span>            time<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span>rd<span class="token punctuation">)</span>            <span class="token comment" spellcheck="true">#记录页数</span>            count <span class="token operator">+=</span><span class="token number">1</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="下载页面"><a href="#下载页面" class="headerlink" title="下载页面"></a>下载页面</h3><p>虽说百度这种大厂不会去随便封禁一个IP，但是请求头是必备的：</p><pre class="line-numbers language-python"><code class="language-python">    <span class="token keyword">def</span> <span class="token function">download_page</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span>url<span class="token punctuation">,</span>method<span class="token operator">=</span><span class="token string">"get"</span><span class="token punctuation">,</span>data<span class="token operator">=</span>None<span class="token punctuation">,</span>proxies<span class="token operator">=</span>None<span class="token punctuation">,</span><span class="token operator">**</span>headers_kwargs<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token comment" spellcheck="true">#随机请求头</span>        ua <span class="token operator">=</span> random<span class="token punctuation">.</span>choice<span class="token punctuation">(</span>USER_AGENT<span class="token punctuation">)</span>        headers <span class="token operator">=</span> <span class="token punctuation">{</span>            <span class="token string">"User_Agent"</span><span class="token punctuation">:</span>ua        <span class="token punctuation">}</span>        <span class="token keyword">if</span> headers_kwargs<span class="token punctuation">:</span>            headers<span class="token punctuation">.</span>update<span class="token punctuation">(</span>headers_kwargs<span class="token punctuation">)</span>        <span class="token keyword">if</span> method<span class="token punctuation">.</span>lower<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token string">"get"</span><span class="token punctuation">:</span>            resp <span class="token operator">=</span> self<span class="token punctuation">.</span>session<span class="token punctuation">.</span>get<span class="token punctuation">(</span>url<span class="token punctuation">,</span>headers<span class="token operator">=</span>headers<span class="token punctuation">)</span>        <span class="token keyword">elif</span> method<span class="token punctuation">.</span>lower<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token string">"post"</span><span class="token punctuation">:</span>            resp <span class="token operator">=</span> self<span class="token punctuation">.</span>session<span class="token punctuation">.</span>post<span class="token punctuation">(</span>url<span class="token punctuation">,</span> headers<span class="token operator">=</span>headers<span class="token punctuation">,</span>data<span class="token operator">=</span>data<span class="token punctuation">)</span>        <span class="token keyword">return</span> resp<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="解析页面"><a href="#解析页面" class="headerlink" title="解析页面"></a>解析页面</h3><p>利用了刚才上面使用的xpath表达式提取内容</p><pre class="line-numbers language-python"><code class="language-python">    <span class="token keyword">def</span> <span class="token function">parser</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span>resp<span class="token punctuation">)</span><span class="token punctuation">:</span>        li_xpath <span class="token operator">=</span> resp<span class="token punctuation">.</span>xpath<span class="token punctuation">(</span><span class="token string">"//ul[@id='thread_list']//li"</span><span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>len<span class="token punctuation">(</span>li_xpath<span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token keyword">for</span> li <span class="token keyword">in</span> li_xpath<span class="token punctuation">:</span>            _times <span class="token operator">=</span> li<span class="token punctuation">.</span>xpath<span class="token punctuation">(</span><span class="token string">"div[@class='t_con cleafix']//span[@class='pull-right is_show_create_time']/text()"</span><span class="token punctuation">)</span>            _title <span class="token operator">=</span> li<span class="token punctuation">.</span>xpath<span class="token punctuation">(</span><span class="token string">"div[@class='t_con cleafix']//div[@class='threadlist_title pull_left j_th_tit ']/a[@class='j_th_tit ']/text()"</span><span class="token punctuation">)</span>            title <span class="token operator">=</span> _title<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>strip<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">if</span> _title <span class="token keyword">else</span> <span class="token string">""</span>            _context <span class="token operator">=</span> li<span class="token punctuation">.</span>xpath<span class="token punctuation">(</span><span class="token string">"div[@class='t_con cleafix']//div[@class='threadlist_abs threadlist_abs_onlyline ']/text()"</span><span class="token punctuation">)</span>            context <span class="token operator">=</span> _context<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>strip<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">if</span> _context <span class="token keyword">else</span> <span class="token string">""</span>            _href <span class="token operator">=</span> li<span class="token punctuation">.</span>xpath<span class="token punctuation">(</span><span class="token string">"div[@class='t_con cleafix']//div[@class='threadlist_title pull_left j_th_tit ']/a[@class='j_th_tit ']/@href"</span><span class="token punctuation">)</span>            href <span class="token operator">=</span> _href<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>strip<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">if</span> _href <span class="token keyword">else</span> <span class="token string">""</span>            info <span class="token operator">=</span> <span class="token punctuation">{</span>                <span class="token string">"评论内容"</span><span class="token punctuation">:</span> context<span class="token punctuation">,</span>                <span class="token string">"标题"</span><span class="token punctuation">:</span>title<span class="token punctuation">,</span>                <span class="token string">"链接"</span><span class="token punctuation">:</span> href            <span class="token punctuation">}</span>            <span class="token keyword">print</span><span class="token punctuation">(</span>info<span class="token punctuation">)</span>            ret <span class="token operator">=</span> self<span class="token punctuation">.</span>client<span class="token punctuation">[</span><span class="token string">"tieba"</span><span class="token punctuation">]</span><span class="token punctuation">.</span>insert<span class="token punctuation">(</span>info<span class="token punctuation">)</span>            <span class="token comment" spellcheck="true">#判断是否有评论，有的话进入评论页</span>            <span class="token keyword">if</span> href<span class="token punctuation">:</span>                url <span class="token operator">=</span> parse<span class="token punctuation">.</span>urljoin<span class="token punctuation">(</span>tb<span class="token punctuation">.</span>prefix_url<span class="token punctuation">,</span> href<span class="token punctuation">)</span>                rd <span class="token operator">=</span> random<span class="token punctuation">.</span>randint<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">15</span><span class="token punctuation">)</span>                <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"详情页睡眠{}秒"</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>rd<span class="token punctuation">)</span><span class="token punctuation">)</span>                time<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span>rd<span class="token punctuation">)</span>                resp <span class="token operator">=</span> self<span class="token punctuation">.</span>download_page<span class="token punctuation">(</span>url<span class="token punctuation">)</span>                html <span class="token operator">=</span> etree<span class="token punctuation">.</span>HTML<span class="token punctuation">(</span>resp<span class="token punctuation">.</span>text<span class="token punctuation">)</span>                self<span class="token punctuation">.</span>parser_inner<span class="token punctuation">(</span>html<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="评论页内容提取"><a href="#评论页内容提取" class="headerlink" title="评论页内容提取"></a>评论页内容提取</h3><pre class="line-numbers language-python"><code class="language-python">    <span class="token keyword">def</span> <span class="token function">parser_inner</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span>html<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"进入详情页"</span><span class="token punctuation">)</span>        div_list <span class="token operator">=</span> html<span class="token punctuation">.</span>xpath<span class="token punctuation">(</span><span class="token string">"//div[@class='p_postlist']/div[@class='l_post l_post_bright j_l_post clearfix  ']"</span><span class="token punctuation">)</span>        <span class="token keyword">for</span> div <span class="token keyword">in</span> div_list<span class="token punctuation">:</span>            _context <span class="token operator">=</span> div<span class="token punctuation">.</span>xpath<span class="token punctuation">(</span><span class="token string">"div[@class='d_post_content_main ']//div[@class='d_post_content j_d_post_content ']/text()"</span><span class="token punctuation">)</span>            context <span class="token operator">=</span> _context<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>strip<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">if</span> _context <span class="token keyword">else</span> <span class="token string">""</span>            info <span class="token operator">=</span> <span class="token punctuation">{</span>                <span class="token string">"评论内容"</span><span class="token punctuation">:</span>context<span class="token punctuation">,</span>                <span class="token string">"标题"</span><span class="token punctuation">:</span> <span class="token string">""</span><span class="token punctuation">,</span><span class="token comment" spellcheck="true">#标题其实就是贴子标题</span>                <span class="token string">"链接"</span><span class="token punctuation">:</span><span class="token string">""</span>            <span class="token punctuation">}</span>            <span class="token keyword">print</span><span class="token punctuation">(</span>info<span class="token punctuation">)</span>            ret <span class="token operator">=</span> self<span class="token punctuation">.</span>client<span class="token punctuation">[</span><span class="token string">"tieba"</span><span class="token punctuation">]</span><span class="token punctuation">.</span>insert<span class="token punctuation">(</span>info<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="数据"><a href="#数据" class="headerlink" title="数据"></a>数据</h2><p><img src="https://img-blog.csdnimg.cn/2020040620574347.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2x1b2h1YTEzOTUw,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>这是存入mongodb中的数据，当然实际还提取了发帖者、时间、评论数等等，这里就不展示了，有兴趣的可以自己写xpath提取。</p><h2 id="词云展示"><a href="#词云展示" class="headerlink" title="词云展示"></a>词云展示</h2><p>为了更加形象的查看提取的数据里都有哪些关键词，这里使用词云进行展示（笔者也不会其他的，随大流了）。没什么技术含量，只给出部分代码了。</p><h3 id="加载数据"><a href="#加载数据" class="headerlink" title="加载数据"></a>加载数据</h3><pre class="line-numbers language-python"><code class="language-python">    <span class="token keyword">def</span> <span class="token function">load_data</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span>collection<span class="token operator">=</span><span class="token string">"tieba"</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        tieba <span class="token operator">=</span> self<span class="token punctuation">.</span>client<span class="token punctuation">[</span>collection<span class="token punctuation">]</span>        tb <span class="token operator">=</span> pd<span class="token punctuation">.</span>DataFrame<span class="token punctuation">(</span>list<span class="token punctuation">(</span>tieba<span class="token punctuation">.</span>find<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> tb<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="jieba处理"><a href="#jieba处理" class="headerlink" title="jieba处理"></a>jieba处理</h3><pre class="line-numbers language-python"><code class="language-python">    <span class="token comment" spellcheck="true">#去停用词</span>    <span class="token keyword">def</span> <span class="token function">remove_stopwords</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span>words<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token punctuation">[</span>word <span class="token keyword">for</span> word <span class="token keyword">in</span> words <span class="token keyword">if</span> word <span class="token operator">not</span> <span class="token keyword">in</span> self<span class="token punctuation">.</span>stopwords <span class="token operator">and</span> len<span class="token punctuation">(</span>word<span class="token punctuation">)</span><span class="token operator">></span><span class="token number">1</span><span class="token punctuation">]</span>    <span class="token keyword">def</span> <span class="token function">join_words</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span>df<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> df<span class="token punctuation">:</span>            self<span class="token punctuation">.</span>words <span class="token operator">=</span> self<span class="token punctuation">.</span>words <span class="token operator">+</span> <span class="token string">" "</span><span class="token operator">+</span><span class="token string">" "</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span>df<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">#分词</span>    <span class="token keyword">def</span> <span class="token function">cut_words</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span>text<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token comment" spellcheck="true">#列表形式返回</span>        <span class="token keyword">return</span> jieba<span class="token punctuation">.</span>lcut<span class="token punctuation">(</span>text<span class="token punctuation">)</span>        <span class="token comment" spellcheck="true">#生成器返回，节省空间</span>        <span class="token comment" spellcheck="true">#return jieba.cut(text)</span>    <span class="token keyword">def</span> <span class="token function">data_clean</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        data <span class="token operator">=</span> self<span class="token punctuation">.</span>load_data<span class="token punctuation">(</span><span class="token punctuation">)</span>        data<span class="token punctuation">[</span><span class="token string">"评论内容"</span><span class="token punctuation">]</span> <span class="token operator">=</span> data<span class="token punctuation">[</span><span class="token string">"评论内容"</span><span class="token punctuation">]</span><span class="token punctuation">.</span>apply<span class="token punctuation">(</span>self<span class="token punctuation">.</span>cut_words<span class="token punctuation">)</span>         data<span class="token punctuation">[</span><span class="token string">"评论内容"</span><span class="token punctuation">]</span> <span class="token operator">=</span> data<span class="token punctuation">[</span><span class="token string">"评论内容"</span><span class="token punctuation">]</span><span class="token punctuation">.</span>apply<span class="token punctuation">(</span>self<span class="token punctuation">.</span>remove_stopwords<span class="token punctuation">)</span>         data<span class="token punctuation">[</span><span class="token string">"评论内容"</span><span class="token punctuation">]</span><span class="token punctuation">.</span>apply<span class="token punctuation">(</span>self<span class="token punctuation">.</span>join_words<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="词云"><a href="#词云" class="headerlink" title="词云"></a>词云</h3><pre class="line-numbers language-python"><code class="language-python">    <span class="token keyword">def</span> <span class="token function">to_wordcloud</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        list_1d <span class="token operator">=</span> self<span class="token punctuation">.</span>data_clean<span class="token punctuation">(</span><span class="token punctuation">)</span>        wc <span class="token operator">=</span> WordCloud<span class="token punctuation">(</span>font_path<span class="token operator">=</span><span class="token string">"C:\Windows\Fonts\simsun.ttc"</span><span class="token punctuation">,</span>width<span class="token operator">=</span><span class="token number">800</span><span class="token punctuation">,</span>height<span class="token operator">=</span><span class="token number">700</span><span class="token punctuation">)</span>        words <span class="token operator">=</span> <span class="token string">" "</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span>list_1d<span class="token punctuation">)</span>        img <span class="token operator">=</span> wc<span class="token punctuation">.</span>generate<span class="token punctuation">(</span>words<span class="token punctuation">)</span>        plt<span class="token punctuation">.</span>figure<span class="token punctuation">(</span>figsize<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">15</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        plt<span class="token punctuation">.</span>imshow<span class="token punctuation">(</span>img<span class="token punctuation">)</span>        plt<span class="token punctuation">.</span>axis<span class="token punctuation">(</span><span class="token string">'off'</span><span class="token punctuation">)</span>        wc<span class="token punctuation">.</span>to_file<span class="token punctuation">(</span><span class="token string">"发售前.png"</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="发售前"><a href="#发售前" class="headerlink" title="发售前"></a>发售前</h3><p><img src="https://img-blog.csdnimg.cn/20200406212915389.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2x1b2h1YTEzOTUw,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>可以看出结果分词后词云展示的还是相对准确的，主要的几个词可以理解为骑砍2是一款游戏需要什么配置、发售时间，但是右上角大佬是个什么鬼？</p><h3 id="发售后"><a href="#发售后" class="headerlink" title="发售后"></a>发售后</h3><p><img src="https://img-blog.csdnimg.cn/20200406214638571.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2x1b2h1YTEzOTUw,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>家族应该是游戏中的一种机制，BUG也醒目，说明发售初期还是存在不少bug的，如果玩过一代的话，这个也相对能理解了,期待正式版。</p><h2 id="结束"><a href="#结束" class="headerlink" title="结束"></a>结束</h2><p>贴吧爬取相对是比较简单，不过刚好可以练习一下xpath语法，今天就到这了。<br>更多内容请关注<a href="http://www.happyhong.cn/">从今天开始种树</a><br>关注<a href>知识图谱与大数据</a>公众号，获取更多内容。<br><img src="https://img-blog.csdnimg.cn/20200321100547328.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2x1b2h1YTEzOTUw,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p>]]></content>
      
      
      <categories>
          
          <category> 爬虫 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 爬虫 </tag>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>爬虫学习(1)------从数据看奥斯卡陪跑健将到底是谁？学院派评委都热衷于哪类电影？</title>
      <link href="/2020/03/21/pa-chong-xue-xi-1-cong-shu-ju-kan-ao-si-qia-pei-pao-jian-jiang-dao-di-shi-shui-xue-yuan-pai-ping-wei-du-re-zhong-yu-na-lei-dian-ying/"/>
      <url>/2020/03/21/pa-chong-xue-xi-1-cong-shu-ju-kan-ao-si-qia-pei-pao-jian-jiang-dao-di-shi-shui-xue-yuan-pai-ping-wei-du-re-zhong-yu-na-lei-dian-ying/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>奥斯卡颁奖季虽已过去有些日子，《寄生虫》夺得最佳影片，《1917》也不拉下风，全片的长镜头的确震撼，这都不是今天要蹭的过气热点。作为一个电影死忠，当然还是想通过数据看看谁是奥斯卡男主最优陪跑员，谁又是白给先锋，奥斯卡派评委都热衷于哪类电影，以前总是听说小李子一直在陪跑（不过他在16年就凭借《荒野猎人》中的出色表现夺得最佳男主，还记得大众网友烧香拜佛来保佑他夺冠），今天就通过爬取一些历年数据看看是不是正如影迷们所说那个维密收割机–小李子才是陪跑之王。</p><h2 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h2><h3 id="所用到一些工具"><a href="#所用到一些工具" class="headerlink" title="所用到一些工具"></a>所用到一些工具</h3><ul><li>requests</li><li>lxml</li><li>pymongo</li><li>pandas</li><li>xpath-helper</li></ul><p>requests就不用多说了，凭此库可以满足80%的爬虫任务了；<br>lxml库主要是使用xpath进行提取网页中的一些数据；<br>pymongo是为了将提取的一些非结构化数据进行存储，前面已有一篇介绍的文章<a href="http://www.happyhong.cn/post/29/">MongoDB快速学习</a>，有兴趣的可以点击看看一下一些基本的安装增删改查等等；<br>pandas这么无情的库就不用多介绍了吧，本文用它来读取MongoDB中的数据；<br>xpath-helper是一个直接可以在网页上使用xpath表达式提取信息的工具，需要自己安装，如没有安装包，请私信或留言联系我。</p><h3 id="目标"><a href="#目标" class="headerlink" title="目标"></a>目标</h3><p>个人认为选取目标首先还是选择那些突破反爬比较容易的网站，这样可以节省很多时间，不过也可以尝试反爬还可以的，这样可以锻炼技巧，各有利弊。本次选择了时光网，因为有几个榜单就是专门提供各大奖的历史信息，不用特意去找，信息比较集中。</p><h3 id="确认提取链接"><a href="#确认提取链接" class="headerlink" title="确认提取链接"></a>确认提取链接</h3><p>首先登录时光网首页，拉到最下面找到特色榜单选项，点击进入：<br><img src="https://img-blog.csdnimg.cn/20200329180541390.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2x1b2h1YTEzOTUw,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>然后搜索”奥斯卡”:<br><img src="https://img-blog.csdnimg.cn/20200329180801488.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2x1b2h1YTEzOTUw,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>进入搜索结果页面：<br><img src="https://img-blog.csdnimg.cn/20200329180837389.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2x1b2h1YTEzOTUw,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>上图用箭头标注的即想要的结果，点击奥斯卡历届最佳男主演，进入页面：<br><img src="https://img-blog.csdnimg.cn/20200329181052883.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2x1b2h1YTEzOTUw,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>按照惯例，按F12打开开发者选项，刷新页面，查看请求，一般数据要么在html页面，要么通过json格式，如果请求列表中数据较多，你可以点击XHR来查看json请求，但是你会发现此选项下面并没有请求，这时就选Doc来查看html请求：<br><img src="https://img-blog.csdnimg.cn/20200329182249802.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2x1b2h1YTEzOTUw,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20200329182334151.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2x1b2h1YTEzOTUw,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>doc下面刚好只有一个请求，直接点进去：<br><img src="https://img-blog.csdnimg.cn/20200329182553592.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2x1b2h1YTEzOTUw,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>标红的为后面要用的请求url，请求方法是<strong>get,get,get</strong>重要的东西说三遍~~，这些要记住，然后切换到Response页面，Ctrl+F搜索一个页面上看到的词随便一个就行，以此来确认你找到的这个请求链接是正确的，我这里搜的是<strong>华金·菲尼克斯</strong>：<br><img src="https://img-blog.csdnimg.cn/20200329182946217.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2x1b2h1YTEzOTUw,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>可以看到是有结果的，这说明我们的链接没问题，接下来就开始提取想要的内容了。</p><h2 id="提取信息"><a href="#提取信息" class="headerlink" title="提取信息"></a>提取信息</h2><p>将页面切到Element，这里是网页的源代码，我们所需的信息均可以从这里提取,打开xpath-helper,页面介绍如下：<br><img src="https://img-blog.csdnimg.cn/20200329183842828.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2x1b2h1YTEzOTUw,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>这里就暂时不介绍xpath语法了，直接进行查询使用了，以后会考虑专门出一篇xpath语法博客。<br>点击箭头选择想要的元素，如最佳男演员获奖者：<br><img src="https://img-blog.csdnimg.cn/20200329184300317.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2x1b2h1YTEzOTUw,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20200329185643231.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2x1b2h1YTEzOTUw,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>所以获奖者的外层元素为（div  class=’event_awards event_list’）—&gt;(dl)–&gt;(div class=’yellowbox’)–&gt;(div class=’review_list’)–&gt;(dl class=’fix’)—-&gt;(dd)–&gt;(strong class=’px14 c_a5)–&gt;a,可以编写xpath语句进行测试：<br><img src="https://img-blog.csdnimg.cn/20200329185911833.png" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20200329185937451.png" alt="在这里插入图片描述"><br>年份可以一次提取到，最后在代码里对应一下即可。<br><img src="https://img-blog.csdnimg.cn/20200329190057923.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2x1b2h1YTEzOTUw,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>由上所示每一年都在dd标签中，代码中循环读取即能读到所有年份的数据，这里再提一下提名者是在<code>div class=&#39;bluebox&#39;</code>下，提取方法与前一个yellowbox一样。</p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><p>这里使用Python类进行提取，只介绍主要的部分了：</p><h3 id="导入库"><a href="#导入库" class="headerlink" title="导入库"></a>导入库</h3><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">import</span> requests<span class="token keyword">import</span> random<span class="token keyword">import</span> json<span class="token keyword">import</span> re<span class="token keyword">import</span> time<span class="token keyword">from</span> lxml <span class="token keyword">import</span> etree<span class="token keyword">from</span> ua <span class="token keyword">import</span> USER_AGENT   <span class="token comment" spellcheck="true">#请求头集合</span><span class="token keyword">from</span> spider<span class="token punctuation">.</span>dbs <span class="token keyword">import</span> StoreData  <span class="token comment" spellcheck="true">#自己写的一个打开mongdb数据库的类</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="StoreData"><a href="#StoreData" class="headerlink" title="StoreData"></a>StoreData</h3><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">StoreData</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> host<span class="token operator">=</span><span class="token string">"127.0.0.1"</span><span class="token punctuation">,</span> db<span class="token operator">=</span><span class="token string">"douban"</span><span class="token punctuation">,</span> port<span class="token operator">=</span><span class="token number">27017</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>host <span class="token operator">=</span> host        self<span class="token punctuation">.</span>port <span class="token operator">=</span> port        self<span class="token punctuation">.</span>client <span class="token operator">=</span> self<span class="token punctuation">.</span>connect<span class="token punctuation">(</span>host<span class="token punctuation">,</span> port<span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">connect</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> host<span class="token punctuation">,</span> port<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> MongoClient<span class="token punctuation">(</span>host<span class="token punctuation">,</span> port<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="初始化"><a href="#初始化" class="headerlink" title="初始化"></a>初始化</h3><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Mtime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>osc_first_url<span class="token operator">=</span> <span class="token string">"http://award.mtime.com/3/award/31/"</span> <span class="token comment" spellcheck="true">#第一页链接</span>        self<span class="token punctuation">.</span>osc_url <span class="token operator">=</span> <span class="token string">"http://award.mtime.com/3/award/31/index-{}.html"</span><span class="token comment" spellcheck="true">##第二页开始链接</span>        self<span class="token punctuation">.</span>db <span class="token operator">=</span> StoreData<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>client<span class="token punctuation">[</span><span class="token string">"movie"</span><span class="token punctuation">]</span>  <span class="token comment" spellcheck="true">#mongodb</span>        self<span class="token punctuation">.</span>session <span class="token operator">=</span>requests<span class="token punctuation">.</span>Session<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 创建session对象，保持cookies</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>链接在前面已经说过了，有一点忘记提了，第一页链接和第二页链接不太一样，不能用通用的链接方式，具体看上面代码里。</p><h3 id="下载函数"><a href="#下载函数" class="headerlink" title="下载函数"></a>下载函数</h3><p>注意一定要用user-agent，这是基本反反爬。</p><pre class="line-numbers language-python"><code class="language-python">    <span class="token keyword">def</span> <span class="token function">download_page</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span>url<span class="token punctuation">,</span><span class="token operator">**</span>headers_kwargs<span class="token punctuation">)</span><span class="token punctuation">:</span>        user_agent <span class="token operator">=</span> random<span class="token punctuation">.</span>choice<span class="token punctuation">(</span>USER_AGENT<span class="token punctuation">)</span>        headers <span class="token operator">=</span> <span class="token punctuation">{</span>            <span class="token string">"User-Agent"</span><span class="token punctuation">:</span> user_agent<span class="token punctuation">,</span>                <span class="token punctuation">}</span>        <span class="token keyword">if</span> headers_kwargs<span class="token punctuation">:</span>            headers<span class="token punctuation">.</span>update<span class="token punctuation">(</span>headers_kwargs<span class="token punctuation">)</span>        <span class="token comment" spellcheck="true">#get方法，前面截图里面已经注释过</span>        resp <span class="token operator">=</span> self<span class="token punctuation">.</span>session<span class="token punctuation">.</span>get<span class="token punctuation">(</span>url<span class="token punctuation">,</span> headers<span class="token operator">=</span>headers<span class="token punctuation">)</span>                <span class="token keyword">return</span> resp<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="解析函数"><a href="#解析函数" class="headerlink" title="解析函数"></a>解析函数</h3><p>下面直接上提取解析代码，不太懂的看一下注释。</p><pre class="line-numbers language-python"><code class="language-python">    <span class="token keyword">def</span> <span class="token function">parser</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span>text<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token comment" spellcheck="true">#将html文本转为etree类型，为了使用xpath</span>        xp_html <span class="token operator">=</span> etree<span class="token punctuation">.</span>HTML<span class="token punctuation">(</span>text<span class="token punctuation">)</span>        <span class="token comment" spellcheck="true">##年份提取  </span>        year <span class="token operator">=</span> xp_html<span class="token punctuation">.</span>xpath<span class="token punctuation">(</span><span class="token string">"//div[@class='event_awards event_list']/dl/dt/text()"</span><span class="token punctuation">)</span>          <span class="token comment" spellcheck="true">## 所需的信息都在这里面，只需要在后面循环读取</span>        all_movie<span class="token operator">=</span> xp_html<span class="token punctuation">.</span>xpath<span class="token punctuation">(</span><span class="token string">"//div[@class='event_awards event_list']/dl/dd"</span><span class="token punctuation">)</span>        <span class="token keyword">for</span> y<span class="token punctuation">,</span>movie <span class="token keyword">in</span> zip<span class="token punctuation">(</span>year<span class="token punctuation">,</span>all_movie<span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">try</span><span class="token punctuation">:</span>            <span class="token comment" spellcheck="true">## 获奖影片解析规则</span>            <span class="token comment" spellcheck="true">#这里是为了防止空，与scrapy的extract_fistrt()一样</span>                _winning_movie <span class="token operator">=</span> movie<span class="token punctuation">.</span>xpath<span class="token punctuation">(</span><span class="token string">"div[@class='yellowbox']//strong[@class='px14 c_a5']/a/text()"</span><span class="token punctuation">)</span>                winning_movie <span class="token operator">=</span> _winning_movie<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token keyword">if</span> _winning_movie <span class="token keyword">else</span> <span class="token string">""</span>                <span class="token comment" spellcheck="true">## 获奖人的链接</span>                _href <span class="token operator">=</span> movie<span class="token punctuation">.</span>xpath<span class="token punctuation">(</span><span class="token string">"div[@class='yellowbox']//strong[@class='px14 c_a5']/a/@href"</span><span class="token punctuation">)</span>                href <span class="token operator">=</span> _href<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token keyword">if</span> _href <span class="token keyword">else</span> <span class="token string">""</span>                <span class="token comment" spellcheck="true">## 提名人员</span>                _nominated_movie <span class="token operator">=</span> movie<span class="token punctuation">.</span>xpath<span class="token punctuation">(</span><span class="token string">"div[@class='bluebox']//strong[@class='px14c_a5']//a/text()"</span><span class="token punctuation">)</span>                nominated_movie <span class="token operator">=</span> _nominated_movie <span class="token keyword">if</span> _nominated_movie <span class="token keyword">else</span> <span class="token string">""</span>                nominated_movie <span class="token operator">=</span> <span class="token punctuation">[</span>nm<span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token keyword">for</span> nm <span class="token keyword">in</span> nominated_movie<span class="token punctuation">]</span>                <span class="token comment" spellcheck="true">## 提名人员链接</span>                _nominated_href <span class="token operator">=</span> movie<span class="token punctuation">.</span>xpath<span class="token punctuation">(</span><span class="token string">"div[@class='bluebox']//strong[@class='px14c_a5']//a/@href"</span><span class="token punctuation">)</span>                nominated_href <span class="token operator">=</span> _nominated_href <span class="token keyword">if</span> _nominated_href <span class="token keyword">else</span> <span class="token string">""</span>                <span class="token comment" spellcheck="true"># 提取四位年份，这里是因为解析结果是类似于2020年（第92届）这样的，所以要稍微处理一下</span>                _yy <span class="token operator">=</span> re<span class="token punctuation">.</span>findall<span class="token punctuation">(</span><span class="token string">"\d{4}"</span><span class="token punctuation">,</span>y<span class="token punctuation">)</span>                yy <span class="token operator">=</span> _yy<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token keyword">if</span> _yy <span class="token keyword">else</span>  <span class="token string">""</span>                <span class="token comment" spellcheck="true">## 提取届次</span>                _sessions <span class="token operator">=</span> re<span class="token punctuation">.</span>findall<span class="token punctuation">(</span><span class="token string">"第(\d{2,3})届"</span><span class="token punctuation">,</span>y<span class="token punctuation">)</span>                sessions <span class="token operator">=</span> _sessions<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token keyword">if</span> _sessions <span class="token keyword">else</span> <span class="token string">""</span>                award_info <span class="token operator">=</span> <span class="token punctuation">{</span>                    <span class="token string">"年份"</span><span class="token punctuation">:</span>yy<span class="token punctuation">,</span>                    <span class="token string">"届次"</span><span class="token punctuation">:</span>sessions<span class="token punctuation">,</span>                    <span class="token string">"获奖"</span><span class="token punctuation">:</span>winning_movie<span class="token punctuation">,</span>                    <span class="token string">"获奖影片链接"</span><span class="token punctuation">:</span>href<span class="token punctuation">,</span>                    <span class="token string">"提名"</span><span class="token punctuation">:</span>nominated_movie<span class="token punctuation">,</span>                <span class="token punctuation">}</span>                <span class="token comment" spellcheck="true">#award_info .update(inner_context)</span>                <span class="token keyword">print</span><span class="token punctuation">(</span>award_info<span class="token punctuation">)</span>                <span class="token comment" spellcheck="true">#存储到mongdb中</span>                <span class="token comment" spellcheck="true">#actor为我MongoDB movie数据库里的一个集合名</span>                ret <span class="token operator">=</span> self<span class="token punctuation">.</span>db<span class="token punctuation">[</span><span class="token string">"actor"</span><span class="token punctuation">]</span><span class="token punctuation">.</span>insert<span class="token punctuation">(</span>award_info<span class="token punctuation">)</span>                <span class="token keyword">print</span><span class="token punctuation">(</span>ret<span class="token punctuation">)</span>            <span class="token keyword">except</span> Exception <span class="token keyword">as</span> e<span class="token punctuation">:</span>                <span class="token keyword">print</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="主函数"><a href="#主函数" class="headerlink" title="主函数"></a>主函数</h3><pre class="line-numbers language-python"><code class="language-python">    <span class="token keyword">def</span> <span class="token function">main</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token comment" spellcheck="true">#判断是否是第一页，以此控制url</span>            <span class="token keyword">if</span> i <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">:</span>                url <span class="token operator">=</span> self<span class="token punctuation">.</span>osc_first_url            <span class="token keyword">else</span><span class="token punctuation">:</span>                url <span class="token operator">=</span> self<span class="token punctuation">.</span>osc_top100<span class="token punctuation">.</span>format<span class="token punctuation">(</span>i<span class="token punctuation">)</span>            resp <span class="token operator">=</span>self<span class="token punctuation">.</span>download_page<span class="token punctuation">(</span>url<span class="token punctuation">)</span>            <span class="token comment" spellcheck="true">#解决中文乱码</span>            resp<span class="token punctuation">.</span>encoding <span class="token operator">=</span> <span class="token string">"utf-8"</span>            self<span class="token punctuation">.</span>parser<span class="token punctuation">(</span>resp<span class="token punctuation">.</span>text<span class="token punctuation">)</span>            <span class="token comment" spellcheck="true">#一共就10页，慢慢爬无所谓，不要影响人家的性能</span>            rd <span class="token operator">=</span> random<span class="token punctuation">.</span>randint<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">15</span><span class="token punctuation">)</span>            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"睡眠{}秒"</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>rd<span class="token punctuation">)</span><span class="token punctuation">)</span>            time<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span>rd<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="爬取结果"><a href="#爬取结果" class="headerlink" title="爬取结果"></a>爬取结果</h3><p><img src="https://img-blog.csdnimg.cn/20200329192503227.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2x1b2h1YTEzOTUw,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/2020032919281258.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2x1b2h1YTEzOTUw,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>这是MongoDB的展示结果，顺便一提这个MongoDB可视化软件还不错，有需要的可以私信、留言，老外的产品，不是打广告哦。</p><h3 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h3><p>至此就爬取完了最佳男演员的数据，因为这几个榜单前端模板都一样，最佳影片也是同理，修改一下url链接即可。</p><h2 id="数据可视化"><a href="#数据可视化" class="headerlink" title="数据可视化"></a>数据可视化</h2><h3 id="读取数据"><a href="#读取数据" class="headerlink" title="读取数据"></a>读取数据</h3><p>只需从MongoDB中读取数据，这里使用的是pandas库，下面是链接数据库和读取过程：</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">import</span>  pandas <span class="token keyword">as</span> pd<span class="token keyword">import</span> matplotlib<span class="token punctuation">.</span>pyplot <span class="token keyword">as</span> plt<span class="token keyword">from</span> matplotlib<span class="token punctuation">.</span>font_manager <span class="token keyword">import</span> FontProperties<span class="token keyword">from</span> spider<span class="token punctuation">.</span>dbs <span class="token keyword">import</span> StoreData<span class="token keyword">import</span> collections<span class="token comment" spellcheck="true">#如果要显示中文则需要设置字体</span>font <span class="token operator">=</span> FontProperties<span class="token punctuation">(</span>fname<span class="token operator">=</span><span class="token string">'C:\Windows\Fonts\simhei.ttf'</span><span class="token punctuation">,</span> size<span class="token operator">=</span><span class="token number">10</span><span class="token punctuation">)</span>client <span class="token operator">=</span> StoreData<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>clientmv <span class="token operator">=</span> client<span class="token punctuation">[</span><span class="token string">"movie"</span><span class="token punctuation">]</span>act <span class="token operator">=</span> mv<span class="token punctuation">[</span><span class="token string">"actor"</span><span class="token punctuation">]</span>oscar <span class="token operator">=</span> mv<span class="token punctuation">[</span><span class="token string">"oscar"</span><span class="token punctuation">]</span>data <span class="token operator">=</span> pd<span class="token punctuation">.</span>DataFrame<span class="token punctuation">(</span>list<span class="token punctuation">(</span>act<span class="token punctuation">.</span>find<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>osc <span class="token operator">=</span> pd<span class="token punctuation">.</span>DataFrame<span class="token punctuation">(</span>list<span class="token punctuation">(</span>oscar<span class="token punctuation">.</span>find<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>matplotlib如果要显示中文则需要设置字体，参考上面，本文可视化相对简单，就只贴<strong>获奖次数前20</strong>的代码了：</p><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true">#统计获奖次数</span>data<span class="token punctuation">[</span><span class="token string">"获奖"</span><span class="token punctuation">]</span><span class="token punctuation">.</span>value_counts<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token number">20</span><span class="token punctuation">]</span><span class="token punctuation">.</span>plot<span class="token punctuation">.</span>bar<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#设置X轴样式</span>plt<span class="token punctuation">.</span>xticks<span class="token punctuation">(</span>color<span class="token operator">=</span><span class="token string">'blue'</span><span class="token punctuation">,</span>rotation<span class="token operator">=</span><span class="token number">90</span><span class="token punctuation">,</span>fontproperties<span class="token operator">=</span>font<span class="token punctuation">)</span>plt<span class="token punctuation">.</span>title<span class="token punctuation">(</span><span class="token string">"获奖次数前20"</span><span class="token punctuation">,</span>fontproperties<span class="token operator">=</span>font<span class="token punctuation">)</span>plt<span class="token punctuation">.</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="获奖次数前20"><a href="#获奖次数前20" class="headerlink" title="获奖次数前20"></a>获奖次数前20</h3><p><img src="https://img-blog.csdnimg.cn/20200329194020992.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2x1b2h1YTEzOTUw,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>这里有点纳闷了，印象中<strong>丹尼尔·戴-刘易斯</strong>明明获奖获了3次，这里只显示了两次，经过我一番查看，发现时光上的丢失了2008-2010的数据（大家多包涵，懒得补充了，就用现在的数据了，大家就当做没看见，手动狗头保命）。</p><h3 id="提名次数前40名"><a href="#提名次数前40名" class="headerlink" title="提名次数前40名"></a>提名次数前40名</h3><p><img src="https://img-blog.csdnimg.cn/2020032919475746.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2x1b2h1YTEzOTUw,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>纳尼，小李子的提名居然才4次，高居榜首的是拍过《阿拉伯的劳伦斯》和《特洛伊》的彼得奥图和拍过《呼啸山庄》和《傲慢与偏见》的劳伦斯·奥利弗。</p><h3 id="曾提名并获过奖的演员"><a href="#曾提名并获过奖的演员" class="headerlink" title="曾提名并获过奖的演员"></a>曾提名并获过奖的演员</h3><p><img src="https://img-blog.csdnimg.cn/20200329195249944.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2x1b2h1YTEzOTUw,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>这次通过时间魔法把小李子强行排到第一位，哈哈。</p><h3 id="陪跑运动员（一直陪跑，一直爽）"><a href="#陪跑运动员（一直陪跑，一直爽）" class="headerlink" title="陪跑运动员（一直陪跑，一直爽）"></a>陪跑运动员（一直陪跑，一直爽）</h3><p><img src="https://img-blog.csdnimg.cn/20200329195452662.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2x1b2h1YTEzOTUw,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>心疼彼得奥图。</p><h3 id="评委喜欢的"><a href="#评委喜欢的" class="headerlink" title="评委喜欢的"></a>评委喜欢的</h3><p><img src="https://img-blog.csdnimg.cn/20200329195600855.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2x1b2h1YTEzOTUw,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>可以看到奥斯卡这些学院派评委还是相对喜欢<strong>剧情</strong>、<strong>爱情</strong>、<strong>喜剧</strong>、<strong>人物传记</strong>、<strong>犯罪</strong>、<strong>历史</strong>、<strong>战争</strong>两两组合或三三组合的电影，怪不得《盗梦空间》和《蝙蝠侠》没获奖。</p><h2 id="结束"><a href="#结束" class="headerlink" title="结束"></a>结束</h2><p>本文简要的介绍了如何通过网页获取数据并进行一些数据可视化展示。<br>更多内容请关注<a href="http://www.happyhong.cn/">从今天开始种树</a><br>关注知识图谱与大数据公众号，获取更多内容。<br><img src="https://img-blog.csdnimg.cn/20200329200402437.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2x1b2h1YTEzOTUw,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>]]></content>
      
      
      <categories>
          
          <category> 爬虫 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 爬虫 </tag>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
